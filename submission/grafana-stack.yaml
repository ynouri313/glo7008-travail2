apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
  - apiGroups: [""]
    resources:
      - pods
      - namespaces
    verbs:
      - get
      - list
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: default
roleRef:
  kind: ClusterRole
  name: promtail
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: promtail
  namespace: default
  labels:
    app: promtail
spec:
  replicas: 1
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      serviceAccountName: promtail
      securityContext:
            runAsUser: 1000
            runAsGroup: 3000
            fsGroup: 0
      containers:
      - name: promtail
        image: grafana/promtail:2.8.2
        args:
          - --config.file=/etc/promtail/promtail.yaml
          - --log.level=info
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: docker
          mountPath: /var/lib/docker/containers
        - name: promtail-config
          mountPath: /etc/promtail
        - name: positions
          mountPath: /run/promtail
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: docker
        hostPath:
          path: /var/lib/docker/containers  
      - name: promtail-config
        configMap:
          name: promtail-config
      - name: positions
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: default
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
    clients:
      - url: http://loki.default.svc.cluster.local:3100/loki/api/v1/push
        tls_config:
          insecure_skip_verify: true
    positions:
      filename: /run/promtail/positions.yaml
    scrape_configs:
      - job_name: kubernetes-pods
        static_configs:
         - targets:
             - localhost
           labels:
             job: kubernetes-pods
             __path__: /var/log/containers/*.log
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: .* 
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cpu-memory-logger
  namespace: default
spec:
  selector:
    matchLabels:
      app: cpu-memory-logger
  template:
    metadata:
      labels:
        app: cpu-memory-logger
    spec:
      containers:
        - name: logger
          image: busybox
          args:
            - /bin/sh
            - -c
            - |
              while true; do
                echo "$(date) CPU: $(cat /proc/stat | grep '^cpu ')" >> /var/log/cpu-memory.log;
                echo "$(date) Memory: $(free -h)" >> /var/log/cpu-memory.log;
                sleep 10;
              done;
          volumeMounts:
            - name: varlog
              mountPath: /var/log
      volumes:
        - name: varlog
          hostPath:
            path: /var/log

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: default
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.default.svc.cluster.local:9090
      isDefault: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.default.svc.cluster.local:3100

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: default
  labels:
    grafana_dashboard: "true"
data:
  kubernetes-dashboard.json: |
    {
      "id": null,
      "uid": "k8s-dashboard",
      "title": "Kubernetes Cluster Monitoring",
      "tags": ["kubernetes"],
      "timezone": "browser",
      "schemaVersion": 16,
      "version": 0,
      "refresh": "10s",
      "panels": [
        {
          "type": "graph",
          "title": "CPU Usage",
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{image!=''}[5m])) by (pod)",
              "legendFormat": "{{pod}}",
              "datasource": "Prometheus"
            }
          ]
        },
        {
          "type": "graph",
          "title": "Memory Usage",
          "targets": [
            {
              "expr": "sum(container_memory_usage_bytes{image!=''}) by (pod)",
              "legendFormat": "{{pod}}",
              "datasource": "Prometheus"
            }
          ]
        }
      ]
    }

---

# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.1
        ports:
        - containerPort: 3000
        env:
           - name: GF_SERVER_ROOT_URL
             value: "%(protocol)s://%(domain)s/grafana"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-dashboard-provisioning
          mountPath: /etc/grafana/provisioning/dashboards
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-dashboard-provisioning
        configMap:
          name: grafana-dashboard-provisioning

---

# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
spec:
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: grafana

